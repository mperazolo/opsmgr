---
# Copyright 2017, IBM US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#Remove all the inventory files
- hosts: all:!opsmgr_containers
  become: no
  gather_facts: no
  serial: 1
  vars_files:
    - defaults.yml
  tasks:
    - name: clean target inventory files
      local_action: file dest={{ opsmgr_dat }}/inventory-{{ item }} state=absent
      with_items: "{{ group_names }}"
    - name: Ensure the opsmgr_dat directory exist
      local_action: file dest={{ opsmgr_dat }} state=directory
    - name: create target inventory files
      local_action: copy dest={{ opsmgr_dat }}/inventory-{{ item }} content='[targets]' force=no
      with_items: "{{ group_names }}"

#Add each host to the inventory file
- hosts: all:!opsmgr_containers
  become: no
  gather_facts: no
  serial: 1
  vars_files:
    - defaults.yml
  tasks:
    - name: update target inventory files
      local_action: lineinfile dest={{ opsmgr_dat }}/inventory-{{ item }} line='{{ inventory_hostname }}'
      with_items: "{{ group_names }}"
      when: ansible_ssh_host is not defined
    - name: update target inventory files
      local_action: lineinfile dest={{ opsmgr_dat }}/inventory-{{ item }} line='{{ inventory_hostname }} ansible_ssh_host={{ ansible_ssh_host }}'
      with_items: "{{ group_names }}"
      when: ansible_ssh_host is defined


- hosts: localhost
  become: no
  connection: local
  gather_facts: no
  vars_files:
    - defaults.yml
  vars:
    - runbase: true
    - runtgts: true
  tasks:
    - name: create base inventory file
      copy: dest={{ opsmgr_dat }}/inventory-all content='[targets]' force=yes
    - name: update base inventory file
      lineinfile: dest={{ opsmgr_dat }}/inventory-all line='{{ item }}'
      with_items: "{{groups['all']}}"
      when: hostvars[item].ansible_ssh_host is not defined
    - name: update base inventory file
      lineinfile: dest={{ opsmgr_dat }}/inventory-all line='{{ item }} ansible_ssh_host={{ hostvars[item].ansible_ssh_host }}'
      with_items: "{{groups['all']}}"
      when: hostvars[item].ansible_ssh_host is defined
    - name: clean up facts and logs
      file:
          dest: "{{ opsmgr_dir }}/plugins/provisioning/base/{{ item }}"
          state: absent
      with_items:
          - ".facts"
          - "ansible.log"
      when: runbase == true
    - name: run base ansible playbook
      shell: >
        ansible-playbook -i "{{ opsmgr_dat }}/inventory-all"
        -e "opsmgr_dir={{ opsmgr_dir }}"
        site.yml
      args:
        chdir: "{{ opsmgr_dir }}/plugins/provisioning/base/"
      when: runbase == true

    - name: Determine the provisioning plugins that exist
      stat:
        path: "{{ opsmgr_dir }}/plugins/provisioning/{{ item }}"
      with_items: "{{ groups.keys() }}"
      register: directory_stat

    - name: clean up facts and logs
      file:
          dest: "{{ opsmgr_dir }}/plugins/provisioning/{{ item[0].item}}/{{ item[1] }}"
          state: absent
      with_nested:
          - "{{ directory_stat.results }}"
          - [ ".facts", "ansible.log", "run.log" ]
      when: runtgts == true and item[0].stat.exists

    - name: run target ansible playbooks
      shell: >
        ansible-playbook -i "{{ opsmgr_dat }}/inventory-{{ item.item }}"
        -e "opsmgr_dir={{ opsmgr_dir }}"
        site.yml
      args:
        chdir: "{{ opsmgr_dir }}/plugins/provisioning/{{ item.item }}/"
      with_items: "{{ directory_stat.results }}"
      when: runtgts == true and item.stat.exists
